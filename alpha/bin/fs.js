// Generated by CoffeeScript 1.7.1
(function() {
  define(["jquery"], function($) {
    var FileSystem;
    FileSystem = (function() {
      function FileSystem(fileName, fileText, fileList, fileSave) {
        this.reqFS = window.requestFileSystem || window.webkitRequestFileSystem;
        this.fileName = fileName;
        this.fileText = fileText;
        this.fileList = fileList;
        this.fileSave = fileSave;
        this.files = [];
        if (this.reqFS) {
          return this.initFS();
        } else {
          return null;
        }
      }

      FileSystem.prototype.errors = function(err) {
        var message;
        message = "";
        switch (err) {
          case FileError.SECURITY_ERR:
            message = "Security Error";
            break;
          case FileError.NOT_FOUND_ERR:
            message = "Not Found Error";
            break;
          case FileError.QUOTA_EXCEEDED_ERR:
            message = "Quota Exceeded Error";
            break;
          case FileError.INVALID_MODIFICATION_ERR:
            message = "Invalid Modification Error";
            break;
          case FileError.INVALID_STATE_ERR:
            message = "Invalid State Error";
            break;
          default:
            message = "Unknown Error";
        }
        return console.log(message);
      };

      FileSystem.prototype.initFS = function() {
        var self;
        self = this;
        return this.reqFS(window.TEMPORARY, Math.pow(2, 20), (function(fs) {
          self.fs = fs;
          self.saveFileListener();
          return self.listFiles();
        }), this.errors);
      };

      FileSystem.prototype.loadFile = function(filename) {
        var self;
        self = this;
        return this.fs.root.getFile(filename, {}, (function(fileEntry) {
          return fileEntry.file((function(file) {
            var reader;
            reader = new FileReader();
            reader.onload = function(e) {
              self.fileName.val(filename);
              return self.fileText.val(this.result);
            };
            return reader.readAsText(file);
          }), self.errors);
        }), this.errors);
      };

      FileSystem.prototype.displayEntries = function(entries) {
        var delLink, entry, li, link, _i, _len, _results;
        this.fileList.html("");
        _results = [];
        for (_i = 0, _len = entries.length; _i < _len; _i++) {
          entry = entries[_i];
          li = $("<li/>");
          li.addClass("file");
          link = $("<a/>");
          link.html(entry.name);
          link.addClass("edit-file");
          li.append(link);
          delLink = $("<a/>");
          delLink.html("[x]");
          delLink.addClass("del-file");
          li.append(delLink);
          fileList.append(li);
          link.on("click", function(e) {
            e.preventDefault();
            return loadFile(entry.name);
          });
          _results.push(delLink.on("click", function(e) {
            e.preventDefault();
            return deleteFile(entry.name);
          }));
        }
        return _results;
      };

      FileSystem.prototype.listFiles = function() {
        var dirReader, entries, fetchEntries, self;
        dirReader = this.fs.root.createReader();
        entries = [];
        self = this;
        fetchEntries = function() {
          return dirReader.readEntries((function(results) {
            if (!results.length) {
              return self.displayEntries(entries.sort().reverse());
            } else {
              entries = entries.concat(results);
              return fetchEntries();
            }
          }), errors);
        };
        return fetchEntries();
      };

      FileSystem.prototype.saveFile = function(filename, text) {
        var self;
        self = this;
        return this.fs.root.getFile(filename, {
          create: true
        }, (function(fileEntry) {
          return fileEntry.createWriter((function(fileWriter) {
            var textBlob;
            fileWriter.onwriteend = function(e) {
              self.listFiles();
              self.fileName.val("");
              self.fileText.val("");
              return self.fileSave.html("Saved");
            };
            fileWriter.onerror = function(e) {
              console.log("Write error: " + (e.toString()));
              return alert("File save error!");
            };
            textBlob = new Blob([text], {
              type: "text/plain"
            });
            return fileWriter.write(textBlob);
          }), self.errors);
        }), this.errors);
      };

      FileSystem.prototype.deleteFile = function(filename) {
        var self;
        self = this;
        return this.fs.root.getFile(filename, {
          create: false
        }, (function(fileEntry) {
          return fileEntry.remove((function(e) {
            self.listFiles();
            return self.fileSave.html("Deleted");
          }), self.errors);
        }), this.errors);
      };

      FileSystem.prototype.saveFileListener = function() {};

      return FileSystem;

    })();
    return FileSystem;
  });

}).call(this);
